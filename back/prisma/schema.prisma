generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma.ts"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum NDI_TYPE {
  PASSPORT
  FOREIGN_CARD
  NATIONAL_ID
}

enum FAMILY_SUPPORT {
  NONE
  BOTH_GRANDFATHERS
  BOTH_PARENTS
  FATHER
  GRANDFATHER
  GRANDMOTHER
  MOTHER
}

enum FIELD_POSITION {
  NONE
  ATTACKING_MIDFIELDER
  CENTER_BACK
  CENTER_FORWARD
  CENTER_MIDDLEFIELDER
  DEFENSIVE_MIDFIELDER
  GOAL_KEEPER
  LEFT_FULLBACK
  LEFT_MIDDLEFIELDER
  RIGHT_FULLBACK
  RIGHT_MIDDLEFIELDER
  SWEEPER
}

enum GUARDIAN_TYPE {
  NONE
  FATHER
  GRANDFATHER
  GRANDMOTHER
  MOTHER
}

enum PERSONAL_QUALITIES {
  NONE
  FELLOWSHIP
  PUNTUALITY
  RESPONSABILITY
  SOLIDARITY
}

enum PHYSICAL_CAPABILITIES {
  NONE
  BALANCE
  COORDINATION
  FLEXIBILITY
  RESISTANCE
  SPEED
  STRENGTH
}

enum PHYSICAL_QUALITIES {
  NONE
  AGILITY
  DIRBLING
  JUMPING
}

enum PLAYER_CATEGORY {
  NONE
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
}

enum ROLES {
  NONE
  ADMIN
  COACH
  GUARDIAN
  PLAYER
}

enum TIER {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Player {
  /// @TypeGraphQL.omit(input: true)
  id                   String                  @id @default(cuid())
  birthday             DateTime
  category             PLAYER_CATEGORY?
  familySupport        FAMILY_SUPPORT?
  fieldPosition        FIELD_POSITION?
  guardianEmail        String
  guardianId           String
  guardianIdType       NDI_TYPE
  guardianLastName     String
  guardianName         String
  guardianPhone        String
  guardianType         GUARDIAN_TYPE
  height               Float
  hobbies              String[]
  image                String?
  IMC                  Float
  lastName             String
  name                 String
  personalQualities    PERSONAL_QUALITIES[]
  physicalCapabilities PHYSICAL_CAPABILITIES[]
  physicalQualities    PHYSICAL_QUALITIES[]
  placeOfBirth         String?
  playerEmail          String                  @unique
  playerId             String
  playerIdType         NDI_TYPE
  playerNumber         String?
  playerPhone          String
  school               School                  @relation(fields: [schoolId], references: [id])
  schoolId             String
  sportHistory         String?
  weight               Float
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt            DateTime                @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt            DateTime                @updatedAt
}

model School {
  /// @TypeGraphQL.omit(input: true)
  id        String   @unique @default(cuid())
  address   String
  email     String   @unique
  name      String
  /// @TypeGraphQL.omit(output: true)
  password  String
  phone     String
  players   Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  tier      TIER     @default(BASIC)
  users     User[]
  /// @TypeGraphQL.omit(output: true, output: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(output: true, output: true)
  updatedAt DateTime @updatedAt

  @@id([id, email])
}

model User {
  /// @TypeGraphQL.omit(input: true)
  id                    String   @id @default(cuid())
  /// @TypeGraphQL.omit(output: true)
  acceptsPrivacyPolicy  Boolean  @default(false)
  /// @TypeGraphQL.omit(output: true)
  acceptsTermsOfService Boolean  @default(false)
  address               String?  @default("")
  /// @TypeGraphQL.omit(output: true)
  createdAt             DateTime @default(now())
  email                 String   @unique
  lastName              String
  firstName             String
  roles                 ROLES[]
  /// @TypeGraphQL.omit(output: true)
  password              String
  phone                 String?  @default("")
  School                School   @relation(fields: [schoolId, schoolEmail], references: [id, email])
  schoolId              String
  schoolEmail           String   @default("")
  /// @TypeGraphQL.omit(input: false, output: true)
  confirmed             Boolean  @default(false)
  /// @TypeGraphQL.omit(output: true)
  updatedAt             DateTime @updatedAt
}
