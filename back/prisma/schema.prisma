generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma.ts"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum FAMILY_SUPPORT {
  NONE
  AUNT
  FATHER
  GRANDFATHER
  GRANDMOTHER
  MOTHER
  UNCLE
}

enum FIELD_POSITION {
  NONE
  ATTACKING_MIDFIELDER
  CENTER_BACK
  CENTER_FORWARD
  CENTER_MIDDLEFIELDER
  DEFENSIVE_MIDFIELDER
  GOAL_KEEPER
  LEFT_FULLBACK
  LEFT_MIDDLEFIELDER
  RIGHT_FULLBACK
  RIGHT_MIDDLEFIELDER
  SWEEPER
}

enum GUARDIAN_TYPE {
  NONE
  FATHER
  GRANDFATHER
  GRANDMOTHER
  MOTHER
}

enum HANDEDNESS {
  AMBIDEXTROUS
  LEFT
  RIGHT
}

enum NDI_TYPE {
  PASSPORT
  FOREIGN_CARD
  NATIONAL_ID
  CIVIL_REGISTRATION
  IDENTITY_CARD
}

enum PERSONAL_QUALITIES {
  NONE
  FELLOWSHIP
  PUNTUALITY
  RESPONSABILITY
  SOLIDARITY
}

enum PHYSICAL_CAPABILITIES {
  NONE
  BALANCE
  COORDINATION
  FLEXIBILITY
  RESISTANCE
  SPEED
  STRENGTH
}

enum PHYSICAL_QUALITIES {
  NONE
  AGILITY
  DIRBLING
  JUMPING
}

enum PLAYER_CATEGORY {
  NONE
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
}

enum REASON {
  MEDICAL
  INJURY
  LEAVE
  LATE
  SANCTION
  NOT_PLAYING
}

enum ROLES {
  NONE
  ADMIN
  COACH
  GUARDIAN
  PLAYER
}

enum SPORTS {
  BASEBALL
  BASKETBALL
  BOXING
  KARATE
  PINGPONG
  RUNNING
  SKATING
  SOCCER
  SWIMMING
  TAEKWONDO
  TENNIS
  VOLLEYBALL
}

enum TIER {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Player {
  /// @TypeGraphQL.omit(input: true)
  id                 String             @id @default(cuid())
  coachId            String?
  image              String?
  lastName           String
  name               String
  playerAttendances  PlayerAttendance[]
  playerData         PlayerData         @relation(fields: [playerDataId], references: [id])
  playerDataId       String
  playerEmail        String             @unique
  playerGuardian     PlayerGuardian?    @relation(fields: [playerGuardianId], references: [id])
  playerGuardianId   String?
  playerInjuries     PlayerInjuries?    @relation(fields: [playerInjuriesId], references: [id])
  playerInjuriesId   String?
  playerMedical      PlayerMedical?     @relation(fields: [playerMedicalId], references: [id])
  playerMedicalId    String?
  playerPsychology   PlayerPsychology?  @relation(fields: [playerPsychologyId], references: [id])
  playerPsychologyId String?
  playerSportData    PlayerSportData?   @relation(fields: [playerSportDataId], references: [id])
  playerSportDataId  String?
  playerSurgeries    PlayerSurgeries?   @relation(fields: [playerSurgeryId], references: [id])
  playerSurgeryId    String?
  school             School             @relation(fields: [schoolId], references: [id])
  schoolId           String
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt          DateTime           @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt          DateTime           @updatedAt
}

model PlayerAttendance {
  id             String   @id @default(cuid())
  missAttendanceDate DateTime
  player         Player   @relation(fields: [playerId], references: [id])
  playerId       String
  reason         REASON   @default(NOT_PLAYING)
  sport          SPORTS
}

model PlayerData {
  /// @TypeGraphQL.omit(input: true)
  id                      String    @id @default(cuid())
  birthday                DateTime?
  placeOfBirth            String?
  playerIdNumber          String    @unique
  playerIdExpeditionPlace String?
  playerIdType            NDI_TYPE
  playerPhone             String?
  players                 Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt               DateTime  @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt               DateTime  @updatedAt
}

model PlayerPsychology {
  id                   String                  @id @default(cuid())
  hobbies              String[]
  physicalCapabilities PHYSICAL_CAPABILITIES[]
  physicalQualities    PHYSICAL_QUALITIES[]
  personalQualities    PERSONAL_QUALITIES[]
  players              Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt            DateTime                @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt            DateTime                @updatedAt
}

model PlayerGuardian {
  id                        String          @id @default(cuid())
  familySupport             FAMILY_SUPPORT?
  guardianEmail             String
  guardianId                String
  guardianIdType            NDI_TYPE
  guardianIdExpeditionPlace String
  guardianLastName          String
  guardianName              String
  guardianPhone             String
  guardianType              GUARDIAN_TYPE
  player                    Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt                 DateTime        @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt                 DateTime        @updatedAt
}

model PlayerInjuries {
  id             String   @id @default(cuid())
  name           String
  observations   String
  occurrenceDate DateTime
  players        Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt      DateTime @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt      DateTime @updatedAt
}

model PlayerSportData {
  id             String           @id @default(cuid())
  admissionDate  DateTime
  category       PLAYER_CATEGORY?
  fieldPosition  FIELD_POSITION?
  handedness     HANDEDNESS
  players        Player[]
  previousSchool String?
  observations   String?
  shirtNumber    String?
  sport          SPORTS[]
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt      DateTime         @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt      DateTime         @updatedAt
}

model PlayerMedical {
  id             String   @id @default(cuid())
  alergies       String[]
  bloodType      String
  diseases       String[]
  healthProvider String
  height         String
  IMC            String
  players        Player[]
  observations   String?
  weight         String
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt      DateTime @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt      DateTime @updatedAt
}

model PlayerSurgeries {
  id            String   @id @default(cuid())
  observations  String?
  name          String
  performedDate DateTime
  players       Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  createdAt     DateTime @default(now())
  /// @TypeGraphQL.omit(input: true, output: true)
  updatedAt     DateTime @updatedAt
}

model School {
  /// @TypeGraphQL.omit(input: true)
  id        String   @unique @default(cuid())
  address   String
  email     String   @unique
  name      String
  /// @TypeGraphQL.omit(output: true)
  password  String
  phone     String
  players   Player[]
  /// @TypeGraphQL.omit(input: true, output: true)
  tier      TIER     @default(BASIC)
  users     User[]
  /// @TypeGraphQL.omit(output: true, output: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(output: true, output: true)
  updatedAt DateTime @updatedAt
}

model User {
  /// @TypeGraphQL.omit(input: true)
  id                    String   @id @default(cuid())
  /// @TypeGraphQL.omit(output: true)
  acceptsPrivacyPolicy  Boolean  @default(false)
  /// @TypeGraphQL.omit(output: true)
  acceptsTermsOfService Boolean  @default(false)
  address               String?  @default("")
  /// @TypeGraphQL.omit(output: true, input: true)
  createdAt             DateTime @default(now())
  email                 String   @unique
  lastName              String
  firstName             String
  roles                 ROLES[]
  /// @TypeGraphQL.omit(output: true)
  password              String
  phone                 String?  @default("")
  School                School   @relation(fields: [schoolEmail], references: [email])
  schoolEmail           String   @default("")
  /// @TypeGraphQL.omit(input: true, output: true)
  confirmed             Boolean  @default(false)
  /// @TypeGraphQL.omit(output: true, input: true)
  updatedAt             DateTime @updatedAt
}
